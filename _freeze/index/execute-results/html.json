{
  "hash": "7e71ff568c8f85f7c33939802c49eff3",
  "result": {
    "markdown": "---\ntitle: \"El Niño\"\nauthor: \"James Goldie\"\nformat: html\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(janitor)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n```\n:::\n\n```{.r .cell-code}\nlibrary(broom)\nlibrary(RColorBrewer)\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nhere() starts at /workspaces/report-elnino\n```\n:::\n\n```{.r .cell-code}\n# consistent colours for enso phases\nenso_colours <- c(\n  \"lanina\" = \"#3333bb\",\n  \"neutral\" = \"lightgrey\",\n  \"elnino\" = \"#dd3333\")\n```\n:::\n\n\n## Analysis: Indian rainfall and ENSO\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhere(\"data\", \"india-rainfall-raw.csv\") |>\n  read_csv() |>\n  clean_names() |>\n  rename(region = x1) |>\n  rename_with(str_replace_all, everything(), \"jun_sept\", \"jjas\") |>\n  filter(!is.na(region)) ->\nindia_rainfall\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 609 Columns: 12\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(1): ...1 dbl (11): Year, Actual Rainfall: JUN, Actual Rainfall: JUL, Actual\nRainfall:...\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...1`\n```\n:::\n:::\n\n\n## Analysis: monthly SOI to JJAS SOI\n\nAnd here's the average SOI over June–September each year.\n\n::: {.callout-note}\nThere're many ways to classify El Niños! This is just one indicator! But SOI _does_ give us some indication of wind activity over that period.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhere(\"data\", \"soi-monthly-raw.csv\") |>\n  read_csv(col_names = c(\"year_month\", \"value\")) |>\n  separate(year_month, into = c(\"year\", \"month\"), sep = 4) |>\n  mutate(across(c(year, month), as.numeric)) |>\n  filter(year >= 1901, month %in% 6:9) |>\n  group_by(year) |>\n  summarise(mean_soi = mean(value, na.rm = TRUE)) |>\n  mutate(\n    phase = case_when(\n      mean_soi >= 7 ~ \"lanina\",\n      mean_soi <= -7 ~ \"elnino\",\n      TRUE ~ \"neutral\")) |>\n  write_csv(here(\"data\", \"soi-jjas.csv\")) ->\nsoi_jjas\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 1769 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (2): year_month, value\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n# write out to disk for flourish\n# soi_jjas |>  \n#   mutate(\n#     flourish_map = case_when(\n#       mean_soi >= 7 ~ paste0(year, \": \", \"blue\"),\n#       mean_soi <= -7 ~ paste0(year, \": \", \"red\"),\n#       TRUE ~ paste0(year, \": \", \"lightgrey\"))) |>\n#   pull(flourish_map) |>\n#   paste(collapse = \"\\n\") |> cat()\n```\n:::\n\n\nLet's join the two and visualise by colour. Here's the Southern Peninsula:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nindia_rainfall |>\n  filter(region == \"Peninsular India\") |>\n  select(year, actual_rainfall_jjas, departure_percentage_jjas) |>\n  left_join(soi_jjas, by = join_by(year)) |>\n  ggplot() +\n    aes(x = year, y = departure_percentage_jjas, fill = phase) +\n    geom_col() +\n    scale_y_continuous(labels = scales::label_percent(scale = 1)) +\n    scale_fill_manual(values = enso_colours) +\n    theme_minimal() +\n    theme(\n      panel.grid.minor = element_blank(),\n      panel.grid.major.x = element_blank(),\n      legend.position = \"top\",\n      legend.direction = \"horizontal\") +\n    labs(\n      fill = NULL, x = NULL, y = \"Rainfall anomaly\",\n      title = \"South Peninsula: annual June–September rainfall\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/vis-india-soi-rainfall-1.png){width=672}\n:::\n:::\n\n\n## Analysis: crop yield and ENSO\n\nNow let's pull in crop yield data from [ICRISAT](http://data.icrisat.org). This data has columns for each crop _and_ each of three measures:\n\n1. Area (in thousands of hectares),\n2. Productions (in thousands of tons), and\n3. Yield (in kilograms per hectare)\n\nLet's lengthen this a bit so that we can compute on all the dimensions, and we'll classify the states according to the rainfall region that they're in:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhere(\"data\", \"india-crops-by-district.csv\") |>\n  read_csv() |>\n  janitor::clean_names() |>\n  pivot_longer(\n    cols = -c(dist_code, year, state_code, state_name, dist_name),\n    names_to = c(\"crop\", \".value\"),\n    names_pattern =\n      \"([[:alpha:]]+)_(area_1000_ha|production_1000_tons|yield_kg_per_ha)\",\n    values_to = \"value\") |>\n  mutate(crop = str_to_sentence(crop)) |>\n  mutate(\n    rainfall_region = case_match(state_name,\n      c(\"Kerala\", \"Tamil Nadu\", \"Andhra Pradesh\", \"Karnataka\", \"Telangana\") ~\n        \"Peninsular India\",      \n      c(\"Chhattisgarh\", \"Gujarat\", \"Madhya Pradesh\", \"Maharashtra\", \"Orissa\") ~\n        \"Central India\",\n      c(\"Rajasthan\", \"Uttar Pradesh\", \"Haryana\", \"Punjab\", \"Uttarakhand\",\n        \"Himachal Pradesh\") ~\n        \"North West India\",\n      c(\"Assam\", \"Bihar\", \"Jharkhand\", \"West Bengal\" ) ~ \"North East India\")) |>\n  select(year, dist_code, dist_name, state_code, state_name, rainfall_region,\n    crop, everything()) ->\nindia_crops\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 16146 Columns: 80\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): State Name, Dist Name\ndbl (78): Dist Code, Year, State Code, RICE AREA (1000 ha), RICE PRODUCTION ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n### Production by region and crop\n\nNow that this is tidy, let's start wide.\n\nBefore we start looking at breakdowns across regions and crops, let's first just find out which regions and crops produce the most (in mass terms!)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nindia_crops |>\n  filter(year %in% 2005:2014) |>\n  group_by(state_name, rainfall_region) |>\n  summarise(total_prod_1000_tons = sum(production_1000_tons, na.rm = TRUE)) |>\n  ungroup() |>\n  mutate(state_name = fct_reorder(state_name, total_prod_1000_tons)) |>\n  ggplot() +\n    aes(x = state_name, y = total_prod_1000_tons, fill = rainfall_region) +\n    geom_col() +\n    coord_flip() +\n    theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'state_name'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/production-by-region-1.png){width=672}\n:::\n:::\n\n\nLooks like biggest-producing states over 2005-2014 were all Central and North West region states.\n\nHow about crops?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nindia_crops |>\n  filter(year %in% 2005:2014) |>\n  group_by(crop) |>\n  summarise(total_prod_1000_tons = sum(production_1000_tons, na.rm = TRUE)) |>\n  mutate(crop = fct_reorder(crop, total_prod_1000_tons)) |>\n  ggplot() +\n    aes(x = crop, y = total_prod_1000_tons) +\n    geom_col() +\n    coord_flip() +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/production-by-crop-1.png){width=672}\n:::\n:::\n\n\nAs expected, rice and wheat are big ones, followed by sugarcane, oilseeds and maize.\n\nWe probably want to focus on [_kharif_ crops](), which are ones grown during the monsoon season that are dependent on good rain. Rice and maize are both major kharif crops, but wheat is not—it's a _rabi_ crop, grown in the winter.\n\n### Annual yield (all regions and crops)\n\n:::{.callout-note}\nYield in kg/ha is `(production * 10^6) / (area in * 10^3)`\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nindia_crops |>\n  group_by(year) |>\n  summarise(\n    sum_area_1000_ha = sum(area_1000_ha, na.rm = TRUE),\n    sum_production_1000_tons = sum(production_1000_tons, na.rm = TRUE),\n    yield_kg_per_ha =\n      (sum_production_1000_tons * 1e6) /\n      (sum_area_1000_ha * 1e6)) ->\nindia_national_allcrops\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nindia_national_allcrops |>\n  left_join(soi_jjas, by = join_by(year)) |>\n  ggplot() +\n    aes(x = year, y = yield_kg_per_ha) +\n    geom_point(aes(colour = phase)) +\n    geom_smooth(colour = \"#eeeeee\", se = FALSE) +\n    scale_colour_manual(values = enso_colours) +\n    theme_minimal() +\n    theme(\n      legend.direction = \"horizontal\",\n      legend.position = \"top\") +\n    labs(\n      x = NULL, y = \"Yield (kg per ha)\",\n      title = \"Indian national crop yield (all crops)\",\n      subtitle = \"Highlighted by ENSO phase\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/vis-cropyield-national-allcrops-1.png){width=672}\n:::\n:::\n\n\nWe can see that yield has increased steadily over time (likely thanks to technological improvements), but you can see a bit of year-to-year variation.\n\nThere's a lot of noise here, as we're looking at parts of India and crops that are less dependent on rainfall.\n\n### Yield by region\n\nLet's look at this two ways: all crops for each region, and each crop for all regions. We'll start looking at each region:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nindia_crops |>\n  group_by(year, rainfall_region) |>\n  summarise(\n    sum_area_1000_ha = sum(area_1000_ha, na.rm = TRUE),\n    sum_production_1000_tons = sum(production_1000_tons, na.rm = TRUE),\n    yield_kg_per_ha =\n      (sum_production_1000_tons * 1e6) /\n      (sum_area_1000_ha * 1e6)) |>\n  ungroup() ->\nindia_allcrops_byregion\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nindia_allcrops_byregion |>\n  left_join(soi_jjas, by = join_by(year)) |>\n  ggplot() +\n    aes(x = year, y = yield_kg_per_ha) +\n    geom_line(colour = \"#eeeeee\", linewidth = 0.5) +\n    geom_point(aes(colour = phase)) +\n    geom_smooth(colour = \"#dddddd\", se = FALSE) +\n    facet_wrap(vars(rainfall_region)) +\n    scale_colour_manual(values = enso_colours) +\n    theme_minimal() +\n    theme(\n      legend.direction = \"horizontal\",\n      legend.position = \"top\") +\n    labs(\n      x = NULL, y = \"Yield (kg per ha)\",\n      title = \"Indian national crop yield (all crops)\",\n      subtitle = \"Highlighted by ENSO phase\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/vis-cropyield-byregion-allcrops-1.png){width=672}\n:::\n:::\n\n\nIt's interesting to see that yield variability has increased substantially in the last 20 years, particularly in Peninsular India.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# let's focus on peninsular india\nindia_allcrops_byregion |>\n  left_join(soi_jjas, by = join_by(year)) |>\n  filter(rainfall_region == \"Peninsular India\") |>\n  ggplot() +\n    aes(x = year, y = yield_kg_per_ha) +\n    geom_line(colour = \"#eeeeee\", linewidth = 0.5) +\n    geom_point(aes(colour = phase)) +\n    geom_smooth(colour = \"#eeeeee\", se = FALSE) +\n    scale_colour_manual(values = enso_colours) +\n    theme_minimal() +\n    theme(\n      legend.direction = \"horizontal\",\n      legend.position = \"top\",\n      panel.grid.major.x = element_blank(),\n      panel.grid.minor.x = element_blank()) +\n    labs(\n      x = NULL, y = \"Yield (kg per ha)\",\n      title = \"Crop yield in Peninsular India (all crops)\",\n      subtitle = \"Highlighted by ENSO phase\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/vis-cropyield-peninsular-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# let's pre-calculate the loess smoother and then regress the errors against\n# enso phase\n\nfit_and_augment_smoother <- function(df) {\n  df |>\n    loess(yield_kg_per_ha ~ year, data = _) |>\n    augment(data = df)\n}\n\nindia_allcrops_byregion |>\n  left_join(soi_jjas, by = join_by(year)) |>\n  filter(!is.na(yield_kg_per_ha), !is.na(mean_soi)) |>\n  nest(.by = rainfall_region) |>\n  mutate(data = map(data, fit_and_augment_smoother)) |>\n  unnest(data) ->\nindia_allcrops_byregion_resid\n\nggplot(india_allcrops_byregion_resid) +\n  aes(x = rainfall_region, y = .resid) +\n  geom_boxplot(\n    aes(colour = phase, fill = phase),\n    outlier.shape = NA,\n    alpha = 0.25) +\n  geom_point(aes(colour = phase), position = \"jitter\", alpha = 0.5, size = 0.5) +\n  geom_hline(yintercept = 0) +\n  scale_colour_manual(values = enso_colours) +\n  scale_fill_manual(values = enso_colours) +\n  coord_flip() +\n  theme_minimal() +\n  theme(\n    panel.grid.minor = element_blank(),\n    panel.grid.major.y = element_blank(),\n    legend.position = \"top\", legend.direction = \"horizontal\") +\n  labs(\n    x = NULL, y = \"Residual on predicted crop yield (kg per hectare)\",\n    colour = \"ENSO phase\",\n    fill = \"ENSO phase\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/vis-cropyield-byregion-allcrops-resid-1.png){width=672}\n:::\n:::\n\n\nThe strong relationship here in Peninsular India, with a weaker relationship in Central India.\n\n### Crops grown by region\n\n\n::: {.cell}\n\n```{.r .cell-code}\nindia_crops |>\n  filter(year == max(year, na.rm = TRUE)) |>\n  group_by(rainfall_region, crop) |>\n  summarise(\n    total_production_1000_tons = sum(production_1000_tons, na.rm = TRUE)) |>\n  ungroup() |>\n  arrange(crop) ->\ncrops_by_region_2022\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'rainfall_region'. You can override using\nthe `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\n# we need some additional colours for all this crop exploration\ncolour_count = length(unique(crops_by_region_2022$crop))\nget_palette = colorRampPalette(brewer.pal(9, \"Paired\"))\ncrop_colours = sample(get_palette(colour_count))\n\nggplot(crops_by_region_2022) +\n  aes(x = crop, y = total_production_1000_tons, fill = crop) +\n  geom_col() +\n  facet_wrap(vars(rainfall_region), scales = \"free_y\") +\n  scale_fill_manual(values = crop_colours) +\n  scale_y_continuous(expand = expansion()) +\n  coord_flip() +\n  theme_minimal() +\n  theme(\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/vis-cropsgrrown-byregion-1.png){width=672}\n:::\n:::\n\n\nRice is a major crop in all four regions—Peninsular India contributed around 25 million tonnes in 2022 (about 20% of the national total).\n\nMaize is another crop grown in this season, and Peninsular India is a major grower—about 13 million tonnes (about 40% of the national total).\n\nThe other big crops in \n\n### Yield by crop\n\n\n::: {.cell}\n\n```{.r .cell-code}\nindia_crops |>\n  group_by(year, crop) |>\n  summarise(\n    sum_area_1000_ha = sum(area_1000_ha, na.rm = TRUE),\n    sum_production_1000_tons = sum(production_1000_tons, na.rm = TRUE),\n    yield_kg_per_ha =\n      (sum_production_1000_tons * 1e6) /\n      (sum_area_1000_ha * 1e6)) |>\n  ungroup() ->\nindia_national_bycrop\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\n# let's pre-calculate the loess smoother and then regress the errors against\n# enso phase\n\nfit_and_augment_smoother <- function(df) {\n  df |>\n    loess(yield_kg_per_ha ~ year, data = _) |>\n    augment(data = df)\n}\n\nindia_national_bycrop |>\n  left_join(soi_jjas, by = join_by(year)) |>\n  filter(!is.na(yield_kg_per_ha), !is.na(mean_soi)) |>\n  nest(.by = crop) |>\n  mutate(data = map(data, fit_and_augment_smoother)) |>\n  unnest(data) ->\nindia_national_bycrop_resid\n\nggplot(india_national_bycrop_resid) +\n  aes(x = crop, y = .resid) +\n  geom_boxplot(\n    aes(colour = phase, fill = phase),\n    outlier.shape = NA,\n    alpha = 0.25) +\n  geom_point(aes(colour = phase), position = \"jitter\", alpha = 0.5, size = 0.5) +\n  geom_hline(yintercept = 0) +\n  facet_wrap(vars(crop), scales = \"free\") +\n  scale_colour_manual(values = enso_colours) +\n  scale_fill_manual(values = enso_colours) +\n  coord_flip() +\n  theme_minimal() +\n  theme(\n    panel.grid.minor = element_blank(),\n    panel.grid.major.y = element_blank(),\n    legend.position = \"top\", legend.direction = \"horizontal\",\n    axis.text.x = element_blank()) +\n  labs(\n    x = NULL, y = \"Residual on predicted crop yield (kg per hectare)\",\n    colour = \"ENSO phase\",\n    fill = \"ENSO phase\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/vis-cropyield-bycrop-allstates-1.png){width=672}\n:::\n:::\n\n\nCrops that seem to be most affected by ENSO include Groundnut, Cotton, Pigeonpea, Pulses and Soyabean. Others with a possible but marginal-looking relationship include Maize, Millet, Mustard, Oilseed, Safflower and Rice.\n\n## Analysis: crop yield and rainfall\n\nThat said, using SOI directly as a predictor might not be the way to go. It might be helpful to look at rainfall more directly as a predictor and then see the effect of ENSO on top.\n\nThe first thing we'll need to do is match Indian states to rainfall regions (NE, NW, central, peninsular). Then we can join the rainfall and crop yield datasets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# first, summarise by year, state and crop\nindia_crops |>\n  group_by(year, state_name, crop) |>\n  summarise(\n    sum_area_1000_ha = sum(area_1000_ha, na.rm = TRUE),\n    sum_production_1000_tons = sum(production_1000_tons, na.rm = TRUE),\n    yield_kg_per_ha =\n      (sum_production_1000_tons * 1e6) /\n      (sum_area_1000_ha * 1e6)) |>\n  ungroup() ->\nindia_states_crops\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'year', 'state_name'. You can override\nusing the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\n# categorise states by rainfall region\n# (map from zheng et al. 2016: https://doi.org/10.1002/2016JD025135\nindia_states_crops |>\n  mutate(\n    rainfall_region = case_match(state_name,\n      c(\"Kerala\", \"Tamil Nadu\", \"Andhra Pradesh\", \"Karnataka\", \"Telangana\") ~\n        \"Peninsular India\",      \n      c(\"Chhattisgarh\", \"Gujarat\", \"Madhya Pradesh\", \"Maharashtra\", \"Orissa\") ~\n        \"Central India\",\n      c(\"Rajasthan\", \"Uttar Pradesh\", \"Haryana\", \"Punjab\", \"Uttarakhand\",\n        \"Himachal Pradesh\") ~\n        \"North West India\",\n      c(\"Assam\", \"Bihar\", \"Jharkhand\", \"West Bengal\" ) ~ \"North East India\")) |>\n  select(year, state_name, rainfall_region, everything()) |>\n  group_by(year, rainfall_region, crop) |>\n  summarise(\n    total_area_1000_ha = sum(sum_area_1000_ha, na.rm = TRUE),\n    total_production_1000_tons = sum(sum_production_1000_tons, na.rm = TRUE),\n    yield_kg_per_ha =\n      (total_production_1000_tons * 1e6) /\n      (total_area_1000_ha * 1e6)) |>\n  ungroup() ->\nindia_regions_crops\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'year', 'rainfall_region'. You can override\nusing the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\n# now join rainfall and crop yield\nindia_regions_crops |>\n  left_join(india_rainfall,\n    by = join_by(year == year, rainfall_region == region),\n    multiple = \"all\",\n    relationship = \"many-to-one\") ->\nindia_regions_all\n\nfit_and_augment_smoother <- function(df) {\n  df |>\n    loess(yield_kg_per_ha ~ year, data = _) |>\n    augment(data = df)\n}\n\n# fit a loess and get the yield residuals\nindia_regions_all |>\n  filter(!is.na(yield_kg_per_ha), !is.na(year),\n    is.finite(year), is.finite(yield_kg_per_ha)) |>\n  nest(.by = c(crop, rainfall_region)) |>\n  mutate(data = map(data, fit_and_augment_smoother)) |>\n  unnest(data) |>\n  rename(yield_fitted = .fitted, yield_resid = .resid) ->\nindia_regions_all_resid\n\n# now visualise rainfall against residuals\nggplot(india_regions_all_resid) +\n  aes(x = departure_percentage_jjas, y = yield_resid) +\n  geom_hline(yintercept = 0) +\n  geom_vline(xintercept = 0) +\n  geom_point() +\n  facet_grid(rows = vars(crop), cols = vars(rainfall_region), scales = \"free\") +\n  theme_minimal() +\n  theme(\n    plot.background = element_rect(fill = \"white\")\n  ) ->\nregion_crop_rainfall_plot\n\nggsave(\n  here(\"out\", \"region_crop_rainfall_plot.png\"),\n  region_crop_rainfall_plot,\n  height = 7200, width = 1200, units = \"px\")\n```\n:::\n\n\nIt still looks like the stronger relationship here is with certain crops rather than certain regions, but let's break it down by both.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}